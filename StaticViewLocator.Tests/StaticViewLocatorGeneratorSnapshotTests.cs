using System.Threading.Tasks;
using StaticViewLocator.Tests.TestHelpers;
using Xunit;

namespace StaticViewLocator.Tests;

public class StaticViewLocatorGeneratorSnapshotTests
{
    [Fact]
    public async Task GeneratesAttributeAndLocatorSources()
    {
        const string input = @"
using Avalonia.Controls;
using StaticViewLocator;

namespace TestApp.ViewModels
{
    public abstract class ViewModelBase
    {
    }

    public class MainWindowViewModel : ViewModelBase
    {
    }

    public class TestViewModel : ViewModelBase
    {
    }

    public abstract class IgnoredViewModel : ViewModelBase
    {
    }
}

namespace TestApp.Views
{
    public class TestView : UserControl
    {
    }
}

namespace TestApp
{
    [StaticViewLocator]
    public partial class ViewLocator
    {
    }
}
";

const string expectedAttribute = """
// <auto-generated />
using System;

namespace StaticViewLocator;

[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
public sealed class StaticViewLocatorAttribute : Attribute
{
}

""";

const string expectedLocator = """
// <auto-generated />
#nullable enable
using System;
using System.Collections.Generic;
using Avalonia.Controls;

namespace TestApp;

public partial class ViewLocator
{
	private static Dictionary<Type, Func<Control>> s_views = new()
	{
		[typeof(TestApp.ViewModels.MainWindowViewModel)] = () => new TextBlock() { Text = "Not Found: TestApp.Views.MainWindowView" },
		[typeof(TestApp.ViewModels.TestViewModel)] = () => new TestApp.Views.TestView(),
	};

	public Control? Build(object? data)
	{
		if (data is null)
		{
			return null;
		}

		var type = data.GetType();

		if (s_views.TryGetValue(type, out var func))
		{
			return func.Invoke();
		}

		throw new Exception($"Unable to create view for type: {type}");
	}
}

""";

        await StaticViewLocatorGeneratorVerifier.VerifyGeneratedSourcesAsync(
            input,
            ("StaticViewLocatorAttribute.cs", expectedAttribute),
            ("ViewLocator_StaticViewLocator.cs", expectedLocator));
    }

    [Fact]
    public async Task GeneratesMappingsForMultipleLocators()
    {
        const string input = @"
using Avalonia.Controls;
using StaticViewLocator;

namespace App.Modules.Admin
{
    [StaticViewLocator]
    public partial class AdminViewLocator
    {
    }

    public class AdminDashboardViewModel
    {
    }

    public class AdminDashboardView : UserControl
    {
    }
}

namespace App.Modules.Client
{
    [StaticViewLocator]
    public partial class ClientViewLocator
    {
    }

    public class ClientDashboardViewModel
    {
    }

    public class ClientDashboardView : UserControl
    {
    }
}

namespace App.Modules.Shared
{
    public class ActivityLogViewModel
    {
    }
}
";

const string expectedAttribute = """
// <auto-generated />
using System;

namespace StaticViewLocator;

[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
public sealed class StaticViewLocatorAttribute : Attribute
{
}

""";

const string expectedAdminLocator = """
// <auto-generated />
#nullable enable
using System;
using System.Collections.Generic;
using Avalonia.Controls;

namespace App.Modules.Admin;

public partial class AdminViewLocator
{
	private static Dictionary<Type, Func<Control>> s_views = new()
	{
		[typeof(App.Modules.Admin.AdminDashboardViewModel)] = () => new App.Modules.Admin.AdminDashboardView(),
		[typeof(App.Modules.Client.ClientDashboardViewModel)] = () => new App.Modules.Client.ClientDashboardView(),
		[typeof(App.Modules.Shared.ActivityLogViewModel)] = () => new TextBlock() { Text = "Not Found: App.Modules.Shared.ActivityLogView" },
	};

	public Control? Build(object? data)
	{
		if (data is null)
		{
			return null;
		}

		var type = data.GetType();

		if (s_views.TryGetValue(type, out var func))
		{
			return func.Invoke();
		}

		throw new Exception($"Unable to create view for type: {type}");
	}
}

""";

const string expectedClientLocator = """
// <auto-generated />
#nullable enable
using System;
using System.Collections.Generic;
using Avalonia.Controls;

namespace App.Modules.Client;

public partial class ClientViewLocator
{
	private static Dictionary<Type, Func<Control>> s_views = new()
	{
		[typeof(App.Modules.Admin.AdminDashboardViewModel)] = () => new App.Modules.Admin.AdminDashboardView(),
		[typeof(App.Modules.Client.ClientDashboardViewModel)] = () => new App.Modules.Client.ClientDashboardView(),
		[typeof(App.Modules.Shared.ActivityLogViewModel)] = () => new TextBlock() { Text = "Not Found: App.Modules.Shared.ActivityLogView" },
	};

	public Control? Build(object? data)
	{
		if (data is null)
		{
			return null;
		}

		var type = data.GetType();

		if (s_views.TryGetValue(type, out var func))
		{
			return func.Invoke();
		}

		throw new Exception($"Unable to create view for type: {type}");
	}
}

""";

        await StaticViewLocatorGeneratorVerifier.VerifyGeneratedSourcesAsync(
            input,
            ("StaticViewLocatorAttribute.cs", expectedAttribute),
            ("AdminViewLocator_StaticViewLocator.cs", expectedAdminLocator),
            ("ClientViewLocator_StaticViewLocator.cs", expectedClientLocator));
    }

    [Fact]
    public async Task DoesNotGenerateBuildMethodWhenAlreadyPresent()
    {
        const string input = @"
using Avalonia.Controls;
using StaticViewLocator;

namespace TestApp.ViewModels
{
    public class SampleViewModel
    {
    }
}

namespace TestApp.Views
{
    public class SampleView : UserControl
    {
    }
}

namespace TestApp
{
    using TestApp.Views;

    [StaticViewLocator]
    public partial class ViewLocator
    {
        public Control? Build(object? data) => new SampleView();
    }
}
";

        const string expectedAttribute = """
// <auto-generated />
using System;

namespace StaticViewLocator;

[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
public sealed class StaticViewLocatorAttribute : Attribute
{
}

""";

        const string expectedLocator = """
// <auto-generated />
#nullable enable
using System;
using System.Collections.Generic;
using Avalonia.Controls;

namespace TestApp;

public partial class ViewLocator
{
	private static Dictionary<Type, Func<Control>> s_views = new()
	{
		[typeof(TestApp.ViewModels.SampleViewModel)] = () => new TestApp.Views.SampleView(),
	};
}

""";

        await StaticViewLocatorGeneratorVerifier.VerifyGeneratedSourcesAsync(
            input,
            ("StaticViewLocatorAttribute.cs", expectedAttribute),
            ("ViewLocator_StaticViewLocator.cs", expectedLocator));
    }
}
